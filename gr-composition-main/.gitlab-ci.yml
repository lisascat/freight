stages:
  - veracode
  - veracode_store_baseline
  - veracode_baseline_scan
 # - unit-test
  - build
  - deploy-model
  #- test-endpoint
  - deploy-endpoint
  - destroy-env
  - cleanup
  #- deploy-lambda
  #- destroy-lambda
  


.base:
  image:
    name: python:3-alpine
    entrypoint: [""]
  before_script:
    - apk add --update git bash curl unzip zip openssl make
    - TERRAFORM_VERSION="1.2.6"
    - curl https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip > terraform_${TERRAFORM_VERSION}_linux_amd64.zip && unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /bin && rm -f terraform_${TERRAFORM_VERSION}_linux_amd64.zip
    - terraform init
    - pip install awscli boto3
  allow_failure:                                                                                                                                                                                                  
    exit_codes:                                                                                                                                                                                                   
    - 0
include:
  - project: gitops/gitlab_templates
    file: templates_v3/helpers/include_all/include.yml
  - project: gitops/gitlab_templates
    file: security/veracode_sast.yml



variables: # prod variables
    #REGISTRY: "885170164782.dkr.ecr.us-east-1.amazonaws.com"
    REGISTRY: "196950028473.dkr.ecr.us-east-1.amazonaws.com"
    MODEL_NAME: "gr-composition" 
    BUCKET_NAME_CARGOX: "sagemaker-ds-fb"
    BUCKET_NAME_FRETEBRAS: "fb-ds-sagemaker"
    MODEL_ARTIFACT_PATH: "deployment/model/current_model.tar.gz"


#unit-test:
#  stage: unit-test
#  image: python:3.8
#  script:
#    - pip install -r cicd/requirements.txt
#    - export PYTHONPATH=$PWD/deployment
#    - tar -xvf $PWD/deployment/model/current_model.tar.gz -C $PWD/deployment/model
    #- pytest  -m "not endpoint" --cov-report=html --junitxml=report.xml --cov=tests/ .
#    - pytest -m "not endpoint" --cov-report=html --junitxml=report.xml --cov=deployment
    #- coverage run pytest -m "not endpoint" --cov-report=html --junitxml=report.xml --cov=deployment
#    - coverage report 
#    - coverage xml
#  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
#  artifacts:
#    reports:
#      coverage_report:
#        coverage_format: cobertura
#        path: coverage.xml
      
#      junit: report.xml
#    paths:
#      - coverage
#  when: manual
#  allow_failure: false

#test-data-contract:
#  stage: unit-test
#  image: python:3.8
#  script:
#    - pip install -r cicd/requirements.txt
#    - export PYTHONPATH=$PWD/deployment
#    - pytest  -m "not endpoint" --cov-report=html --junitxml=report.xml --cov=tests/ .
#    - pytest tests/test_data_contract.py
#  when: manual
#  allow_failure: false

build-and-push:
  stage: build
  extends: .build_and_push
  variables: # Extends overwrite global variables
    DOCKER_FILE: deployment/Dockerfile
      # REGISTRY: "885170164782.dkr.ecr.us-east-1.amazonaws.com"
    REGISTRY: "196950028473.dkr.ecr.us-east-1.amazonaws.com"
  allow_failure: false
  #needs: ["unit-test", "test-data-contract"]

retag:
  stage: build
  image: public.ecr.aws/m8n7w3l2/fretehub:docker-git
  variables:
    FF_GITLAB_REGISTRY_HELPER_IMAGE: 1
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker-dind:2375
    DOCKER_TLS_CERTDIR: ''
    BUILD_ARCH: "linux/amd64"
    PROJECT: "$CI_PROJECT_NAME"
  script:
    - apk add python3-dev=3.6.9-r3 py-pip --repository=http://dl-cdn.alpinelinux.org/alpine/v3.9/main
    - pip3 install awscliv2
    - awsv2 --version
    - awsv2 --region us-east-1 ecr get-login-password | docker login  --username AWS --password-stdin "${REGISTRY}/${PROJECT}"
    - docker pull "${REGISTRY}/${PROJECT}:${CI_COMMIT_SHORT_SHA}"
    - docker tag "${REGISTRY}/${PROJECT}:${CI_COMMIT_SHORT_SHA}" "${REGISTRY}/${PROJECT}:${CI_COMMIT_SHORT_SHA}"
    - docker save -o "${PROJECT}.tar" "${REGISTRY}/${PROJECT}:${CI_COMMIT_SHORT_SHA}"
    - docker load -i "${PROJECT}.tar"
    - docker push "${REGISTRY}/${PROJECT}:${CI_COMMIT_SHORT_SHA}"
  needs:
    - build-and-push

deploy-model:
  image: public.ecr.aws/m8n7w3l2/fretehub:python-3.8-slim
  stage: deploy-model
  script:
    - pip install -r cicd/requirements.txt
    - python cicd/cicd_script.py deploy
  when: manual
  allow_failure: false
  needs:
    - build-and-push
    - retag

#test-endpoint:
#  image: public.ecr.aws/m8n7w3l2/fretehub:python-3.8-slim
#  stage: test-endpoint
#  script:
#    - echo 'Subindo ambiente de teste'
#    - pip install -r deployment/requirements.txt
#    - pip install pytest==7.1.3 pytest-cov==3.0.0 pytest-lazy-fixture==0.6.*
#    - export PYTHONPATH=$PWD/deployment
#    - python cicd/cicd_script.py test_environment
    #- coverage run -m pytest -m endpoint --cov=tests/test_data_contract.py
#    - pytest tests/test_endpoints.py
#    - python cicd/cicd_script.py destroy_test_env
#  when: manual
#  allow_failure: false
#  needs: ["deploy-model"]

#cleanup_deployment_failure:
#  image: public.ecr.aws/m8n7w3l2/fretehub:python-3.8-slim
#  stage: cleanup
#  script:
#    - pip install -r deployment/requirements.txt
#    - python cicd/cicd_script.py destroy_test_env
#  needs: ["test-endpoint"]
#  when: on_failure


deploy-endpoint:
    image: public.ecr.aws/m8n7w3l2/fretehub:python-3.8-slim
    stage: deploy-endpoint
    script:
      #- pip install -r deployment/requirements.txt
      #- python cicd/cicd_script.py endpoint_config
      - pip install -r cicd/requirements.txt
      - python cicd/cicd_script.py endpoint
    when: manual
    allow_failure: false
    # needs: ["test-endpoint"]
  
destroy-env:
  image: public.ecr.aws/m8n7w3l2/fretehub:python-3.8-slim
  stage: destroy-env 
  script:
    - pip install -r deployment/requirements.txt
    - python cicd/cicd_script.py destroy
  when: manual
  allow_failure: false

